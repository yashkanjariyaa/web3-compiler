Easy

Simple Arithmetic Operation\n\nWrite a function/method that takes two integers as input and returns their sum. Ensure that your function handles integer overflow and underflow gracefully

sol:
pragma solidity ^0.8.0;

contract ArithmeticOperations {
    function safeAdd(int256 a, int256 b) public pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a), "Addition overflow/underflow");
        return c;
    }
}

rust:
fn safe_add(a: i64, b: i64) -> Result<i64, &'static str> {
    a.checked_add(b).ok_or("Addition overflow/underflow")
}

fn main() {
    // Example usage
    match safe_add(5, 3) {
        Ok(result) => println!("Sum: {}", result),
        Err(err) => println!("Error: {}", err),
    }
}

Medium
Basic Data Structure Implementation\n\nImplement a stack data structure with push and pop operations. Ensure that your implementation handles stack overflow and underflow scenarios appropriately.

sol:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract mainContract {
    uint256 constant STACK_SIZE = 10; // Define the maximum stack size

    uint256[] private stack;
    uint256 private top;

    constructor() {
        top = 0; // Initialize top pointer
    }

    // Function to push an element onto the stack
    function push(uint256 data) public {
        require(top < STACK_SIZE, "Stack overflow");
        stack.push(data);
        top++;
    }

    // Function to pop an element from the stack
    function pop() public returns (uint256) {
        require(top > 0, "Stack underflow");
        uint256 data = stack[top - 1];
        delete stack[top - 1];
        top--;
        return data;
    }
}

rust:
#![allow(dead_code)]

const STACK_SIZE: usize = 10;

struct Stack {
    stack: Vec<i32>,
    top: usize,
}

impl Stack {
    fn new() -> Self {
        Stack {
            stack: Vec::with_capacity(STACK_SIZE),
            top: 0,
        }
    }

    fn push(&mut self, data: i32) {
        if self.top < STACK_SIZE {
            self.stack.push(data);
            self.top += 1;
        } else {
            panic!("Stack overflow");
        }
    }

    fn pop(&mut self) -> Option<i32> {
        if self.top > 0 {
            self.top -= 1;
            self.stack.pop()
        } else {
            panic!("Stack underflow");
        }
    }
}

fn main() {
    let mut stack = Stack::new();
    stack.push(1);
    stack.push(2);
    stack.push(3);

    println!("Popped element: {:?}", stack.pop());
    println!("Popped element: {:?}", stack.pop());
    println!("Popped element: {:?}", stack.pop());
}



Medium
"Searching Algorithm\n\nImplement a binary search algorithm to find the index of a given element in a sorted array. Ensure your implementation is both iterative and recursive, and analyze the time complexity of each approach.",

sol : 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MainContract {
    function binarySearchIterative(uint256[] memory arr, uint256 target) public pure returns (int256) {
        uint256 left = 0;
        uint256 right = arr.length - 1;

        while (left <= right) {
            uint256 mid = left + (right - left) / 2;

            if (arr[mid] == target) {
                return int256(mid);
            }
            if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1;
    }

    function binarySearchRecursive(uint256[] memory arr, uint256 target) public pure returns (int256) {
        return binarySearchRecursiveHelper(arr, target, 0, int256(arr.length - 1));
    }

    function binarySearchRecursiveHelper(uint256[] memory arr, uint256 target, int256 left, int256 right) private pure returns (int256) {
        if (left <= right) {
            int256 mid = left + (right - left) / 2;

            if (arr[uint(mid)] == target) {
                return mid;
            }
            if (arr[uint(mid)] < target) {
                return binarySearchRecursiveHelper(arr, target, mid + 1, right);
            }
            return binarySearchRecursiveHelper(arr, target, left, mid - 1);
        }

        return -1;
    }
}

rust: 
class MainContract:
    @staticmethod
    def binary_search_iterative(arr, target):
        left = 0
        right = len(arr) - 1

        while left <= right:
            mid = left + (right - left) // 2

            if arr[mid] == target:
                return mid
            if arr[mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        return None

    @staticmethod
    def binary_search_recursive(arr, target):
        return MainContract.binary_search_recursive_helper(arr, target, 0, len(arr) - 1)

    @staticmethod
    def binary_search_recursive_helper(arr, target, left, right):
        if left <= right:
            mid = left + (right - left) // 2

            if arr[mid] == target:
                return mid
            if arr[mid] < target:
                return MainContract.binary_search_recursive_helper(arr, target, mid + 1, right)
            return MainContract.binary_search_recursive_helper(arr, target, left, mid - 1)

        return None

# Test cases
arr = [1, 3, 5, 7, 9, 11, 13, 15]
target = 7
print("Iterative result:", MainContract.binary_search_iterative(arr, target))
print("Recursive result:", MainContract.binary_search_recursive(arr, target))

Hard

Concurrency Control\n\nWrite a concurrent program that simulates a simple banking system with deposit and withdrawal operations. Ensure proper synchronization mechanisms are in place to avoid race conditions and maintain data integrity.

sol:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MainContract {
    mapping(address => uint256) public balances;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
}

rust:
#![allow(dead_code)]

use std::sync::{Arc, Mutex};
use std::thread;

struct Bank {
    balances: Arc<Mutex<Vec<(String, u64)>>>,
}

impl Bank {
    fn new() -> Self {
        Bank {
            balances: Arc::new(Mutex::new(Vec::new())),
        }
    }

    fn deposit(&self, account: String, amount: u64) {
        let mut balances = self.balances.lock().unwrap();
        if let Some(b) = balances.iter_mut().find(|(acc, _)| *acc == account) {
            b.1 += amount;
        } else {
            balances.push((account, amount));
        }
    }

    fn withdraw(&self, account: String, amount: u64) -> Result<(), &'static str> {
        let mut balances = self.balances.lock().unwrap();
        if let Some(b) = balances.iter_mut().find(|(acc, _)| *acc == account) {
            if b.1 >= amount {
                b.1 -= amount;
                Ok(())
            } else {
                Err("Insufficient balance")
            }
        } else {
            Err("Account not found")
        }
    }

    fn get_balance(&self, account: String) -> Option<u64> {
        let balances = self.balances.lock().unwrap();
        if let Some(b) = balances.iter().find(|(acc, _)| *acc == account) {
            Some(b.1)
        } else {
            None
        }
    }
}

fn main() {
    let bank = Arc::new(Bank::new());
    let bank_clone = Arc::clone(&bank);

    let t1 = thread::spawn(move || {
        bank_clone.deposit("Alice".to_string(), 100);
    });

    let bank_clone2 = Arc::clone(&bank);
    let t2 = thread::spawn(move || {
        if let Err(err) = bank_clone2.withdraw("Alice".to_string(), 50) {
            println!("{}", err);
        }
    });

    t1.join().unwrap();
    t2.join().unwrap();

    println!("Alice's balance: {}", bank.get_balance("Alice".to_string()).unwrap_or(0));
}
